//////
memset
\\\\\\

#include <string.h>

void *memset (void *s, int c, size_t n);

       The memset() function fills the first n bytes of the memory area
       pointed to by s with the constant byte c.

The memset() function returns a pointer to the memory area s.

//////
printf
\\\\\\

tmtc

//////
malloc
\\\\\\

tmtc

////
free
\\\\

tmtc

/////
write
\\\\\

tmtc

//////
usleep
\\\\\\

#include <unistd.h>

int usleep(useconds_t usec);

       The usleep() function suspends execution of the calling thread
       for (at least) usec microseconds.  The sleep may be lengthened
       slightly by any system activity or by the time spent processing
       the call or by the granularity of system timers.

The usleep() function returns 0 on success.  On error, -1 is
       returned, with errno set to indicate the error.

////////////
gettimeofday
\\\\\\\\\\\\

#include <sys/time.h>

int gettimeofday(struct timeval *restrict tv, struct timezone *_Nullable restrict tz);

     The functions gettimeofday() can get and set
       the time as well as a timezone.

       The tv argument is a struct timeval (as specified in
       <sys/time.h>):

           struct timeval {
               time_t      tv_sec;     /* seconds */
               suseconds_t tv_usec;    /* microseconds */
           };

       and gives the number of seconds and microseconds since the Epoch
       (see time(2)).

       The tz argument is a struct timezone:

           struct timezone {
               int tz_minuteswest;     /* minutes west of Greenwich */
               int tz_dsttime;         /* type of DST correction */
           };

       If either tv or tz is NULL, the corresponding structure is not
       set or returned.  (However, compilation warnings will result if
       tv is NULL.)

       The use of the timezone structure is obsolete; the tz argument
       should normally be specified as NULL.  (See NOTES below.)

gettimeofday() and settimeofday() return 0 for success.  On
       error, -1 is returned and errno is set to indicate the error.

//////////////
pthread_create
\\\\\\\\\\\\\\

#include <pthread.h>

int pthread_create(pthread_t *restrict thread, const pthread_attr_t *restrict attr, void *(*start_routine)(void *), void *restrict arg);

   The pthread_create() function starts a new thread in the calling
       process.  The new thread starts execution by invoking
       start_routine(); arg is passed as the sole argument of
       start_routine().

       The new thread terminates in one of the following ways:

       •  It calls pthread_exit(3), specifying an exit status value that
          is available to another thread in the same process that calls
          pthread_join(3).

       •  It returns from start_routine().  This is equivalent to
          calling pthread_exit(3) with the value supplied in the return
          statement.

       •  It is canceled (see pthread_cancel(3)).

       •  Any of the threads in the process calls exit(3), or the main
          thread performs a return from main().  This causes the
          termination of all threads in the process.

       The attr argument points to a pthread_attr_t structure whose
       contents are used at thread creation time to determine attributes
       for the new thread; this structure is initialized using
       pthread_attr_init(3) and related functions.  If attr is NULL,
       then the thread is created with default attributes.

       Before returning, a successful call to pthread_create() stores
       the ID of the new thread in the buffer pointed to by thread; this
       identifier is used to refer to the thread in subsequent calls to
       other pthreads functions.

       The new thread inherits a copy of the creating thread's signal
       mask (pthread_sigmask(3)).  The set of pending signals for the
       new thread is empty (sigpending(2)).  The new thread does not
       inherit the creating thread's alternate signal stack
       (sigaltstack(2)).

       The new thread inherits the calling thread's floating-point
       environment (fenv(3)).

       The initial value of the new thread's CPU-time clock is 0 (see
       pthread_getcpuclockid(3)).

On success, pthread_create() returns 0; on error, it returns an
       error number, and the contents of *thread are undefined.

//////////////
pthread_detach
\\\\\\\\\\\\\\

#include <pthread.h>

int pthread_detach(pthread_t thread);
...












